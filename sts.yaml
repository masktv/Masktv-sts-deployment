
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: masktv-mysql-statefulset
  labels:
    app: masktv-mysql
spec:
  serviceName: masktv-mysql-service
  replicas: 5
  selector:
    matchLabels:
      app: masktv-mysql
  template:
    metadata:
      labels:
        app: masktv-mysql
    spec:
      initContainers:
      - name: init-mysql
        image: masktv/masktv:mysql
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/primary.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/replica.cnf /mnt/conf.d/
          fi 
        volumeMounts:
        - name: db-config-pv 
          mountPath: /mnt/conf.d
        - name: config-map 
          mountPath: /mnt/config-map
      - name: clone-mysql
        image: gcr.io/google-samples/xtrabackup:1.0
        commands:
        - bash
        - "-c"
        - |
          set -ex
          # Skip the clone if data already exists.
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          # Skip the clone on primary (ordinal index 0).
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] && exit 0
          # Clone data from previous peer.
          previous_peer="masktv-mysql-statefulset-$(($ordinal-1)).masktv-mysql-service.svc.cluster.local"
          ncat --recv-only $previous_peer 3307 | xbstream -x -C /var/lib/mysql
          # Prepare the backup.
          xtrabackup --prepare --target-dir=/var/lib/mysql
        volumeMounts:
        - name: masktv-mysql-pv
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: db-config-pv
          mountPath: /etc/mysql/conf.d
      containers:
      - name:  masktv-mysql-container
        image: masktv/masktv:mysql
        env:
        -
        ports:
        - name: mysql
          containerPort: 3306
          protocol: TCP
        resources: 
          requests: 
            cpu: 200m
            memory: 100Mi
        #env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: database-secrets
                key: MYSQL_ROOT_PASSWORD
          #- name: MYSQL_DATABASE
            #valueFrom:
              #secretKeyRef:
                #name: database-secrets
                #key: MYSQL_DATABASE
          #- name: MYSQL_USER
            #valueFrom:
              #secretKeyRef:
                #name: database-secrets
                #key: MYSQL_USER
          #- name: MYSQL_PASSWORD
            #valueFrom:
              #secretKeyRef:
                #name: database-secrets
                #key: MYSQL_PASSWORD
        volumeMounts:
        - name: masktv-mysql-pv  
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: db-log-pv     
          mountPath: /var/log/mysql
        - name: db-config-pv     
          mountPath: /etc/mysql/conf.d
      - name: xtrabackup
        image: gcr.io/google-samples/xtrabackup:1.0
        ports: 
        - name: xtrabackup
          containerPort: 3307
        cammand:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql

          # Determine binlog position of cloned data, if any.
          if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
            # XtraBackup already generated a partial "CHANGE MASTER TO" query
            # because we're cloning from an existing replica. (Need to remove the tailing semicolon!)
            cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
            # Ignore xtrabackup_binlog_info in this case (it's useless).
            rm -f xtrabackup_slave_info xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # We're cloning directly from primary. Parse binlog position.
            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm -f xtrabackup_binlog_info xtrabackup_slave_info
            echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi

          # Check if we need to complete a clone by starting replication.
          if [[ -f change_master_to.sql.in ]]; then
            echo "Waiting for mysqld to be ready (accepting connections)"
            until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

            echo "Initializing replication from clone position"
            mysql -h 127.0.0.1 \
                  -e "$(<change_master_to.sql.in), \
                          MASTER_HOST='masktv-mysql-statefulset-$(($ordinal-1)).masktv-mysql-service.svc.cluster.local', \
                          MASTER_USER='root', \
                          MASTER_PASSWORD='$MYSQL_ROOT_PASSWORD', \
                          MASTER_CONNECT_RETRY=10; \
                        START SLAVE;" || exit 1
            # In case of container restart, attempt this at-most-once.
            mv change_master_to.sql.in change_master_to.sql.orig
          fi

          # Start a server to send backups when requested by peers.
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
        volumeMounts:
        - name: masktv-mysql-pv
          mountPath:  /var/lib/mysql
          subPath: mysql
      volumes:
      - name: db-log-pv
        persistentVolumeClaim:
          claimName: db-log-pvc
      - name: db-config-pv
        persistentVolumeClaim:
          claimName: db-config-pvc
      - name: config-map
        configMap:
          name: mysql
  volumeClaimTemplates:
  - metadata:
      name: masktv-mysql-pv
    spec:
      accessModes:  [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
      storageClassName: masktv-storage-class  # Use a storage class for EFS
